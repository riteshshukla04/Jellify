
--- a/node_modules/react-native-carplay/android/src/main/AndroidManifestNew.xml
+++ b/node_modules/react-native-carplay/android/src/main/AndroidManifestNew.xml
@@ -5,6 +5,9 @@
   <uses-permission android:name="androidx.car.app.MAP_TEMPLATES" />
   <uses-permission android:name="androidx.car.app.ACCESS_SURFACE" />
   <uses-permission android:name="android.permission.WAKE_LOCK" />
+  <uses-permission android:name="androidx.car.app.ACCESS_SURFACE" />
+  <uses-permission android:name="androidx.car.app.MAP_TEMPLATES" />
+  <uses-permission android:name="androidx.car.app.NAVIGATION_TEMPLATES" />
 
   <application>
     <service
diff --git a/node_modules/react-native-carplay/android/src/main/java/org/birkir/carplay/CarPlayModule.kt b/node_modules/react-native-carplay/android/src/main/java/org/birkir/carplay/CarPlayModule.kt
index ef6aa04..42cacd2 100644
--- a/node_modules/react-native-carplay/android/src/main/java/org/birkir/carplay/CarPlayModule.kt
+++ b/node_modules/react-native-carplay/android/src/main/java/org/birkir/carplay/CarPlayModule.kt
@@ -187,6 +187,10 @@ class CarPlayModule internal constructor(private val reactContext: ReactApplicat
 
   @ReactMethod
   fun toast(text: String, duration: Int) {
+    if(!::carContext.isInitialized){
+      Log.e(TAG, "carContext not initialized")
+      return
+    }
     CarToast.makeText(carContext, text, duration).show()
   }
 
@@ -271,6 +275,10 @@ class CarPlayModule internal constructor(private val reactContext: ReactApplicat
   }
 
   private fun createScreen(templateId: String): CarScreen? {
+    if (!::carContext.isInitialized) {
+      Log.e(TAG, "carContext not initialized")
+      return null
+  }
     val config = carTemplates[templateId];
     if (config != null) {
       val screen = CarScreen(carContext)
diff --git a/node_modules/react-native-carplay/android/src/main/java/org/birkir/carplay/CarPlaySession.kt b/node_modules/react-native-carplay/android/src/main/java/org/birkir/carplay/CarPlaySession.kt
index 2235853..b3c585f 100644
--- a/node_modules/react-native-carplay/android/src/main/java/org/birkir/carplay/CarPlaySession.kt
+++ b/node_modules/react-native-carplay/android/src/main/java/org/birkir/carplay/CarPlaySession.kt
@@ -22,6 +22,7 @@ import com.facebook.react.modules.appregistry.AppRegistry
 import com.facebook.react.modules.core.TimingModule
 import com.facebook.react.modules.debug.DevSettingsModule
 import org.birkir.carplay.screens.CarScreen
+import android.os.Build
 
 
 class CarPlaySession(private val reactInstanceManager: ReactInstanceManager) : Session(), DefaultLifecycleObserver {
@@ -36,13 +37,23 @@ class CarPlaySession(private val reactInstanceManager: ReactInstanceManager) : S
     screen.marker = "root"
 
     // Handle reload events
-    carContext.registerReceiver(object : BroadcastReceiver() {
-      override fun onReceive(context: Context, intent: Intent) {
-        if ("org.birkir.carplay.APP_RELOAD" == intent.action) {
-          invokeStartTask(reactInstanceManager.currentReactContext!!);
+    if (Build.VERSION.SDK_INT >= 34 && carContext.getApplicationInfo().targetSdkVersion >= 34) {
+      carContext.registerReceiver(object : BroadcastReceiver() {
+        override fun onReceive(context: Context, intent: Intent) {
+          if ("org.birkir.carplay.APP_RELOAD" == intent.action) {
+            invokeStartTask(reactInstanceManager.currentReactContext!!);
+          }
         }
+      }, IntentFilter("org.birkir.carplay.APP_RELOAD"), Context.RECEIVER_EXPORTED)
+      }else{
+             carContext.registerReceiver(object : BroadcastReceiver() {
+              override fun onReceive(context: Context, intent: Intent) {
+                   if ("org.birkir.carplay.APP_RELOAD" == intent.action) {
+                       invokeStartTask(reactInstanceManager.currentReactContext!!);
+                     }
+                 }
+        }, IntentFilter("org.birkir.carplay.APP_RELOAD"))
       }
-    }, IntentFilter("org.birkir.carplay.APP_RELOAD"))
 
     // Run JS
     runJsApplication()
@@ -77,7 +88,7 @@ class CarPlaySession(private val reactInstanceManager: ReactInstanceManager) : S
       }
 
       catalystInstance.getJSModule(AppRegistry::class.java)
-        .runApplication(jsAppModuleName, appParams)
+        ?.runApplication(jsAppModuleName, appParams)
 
       val timingModule = reactContext.getNativeModule(
         TimingModule::class.java
@@ -85,7 +96,7 @@ class CarPlaySession(private val reactInstanceManager: ReactInstanceManager) : S
       val carModule = reactInstanceManager
         .currentReactContext?.getNativeModule(CarPlayModule::class.java)
       carModule!!.setCarContext(carContext, screen)
-      timingModule!!.onHostResume()
+      // timingModule!!.onHostResume()
 
     } catch (e: Exception) {
       e.printStackTrace()
diff --git a/node_modules/react-native-carplay/android/src/main/java/org/birkir/carplay/parser/RCTListTemplate.kt b/node_modules/react-native-carplay/android/src/main/java/org/birkir/carplay/parser/RCTListTemplate.kt
index f6f441a..da4e1f5 100644
--- a/node_modules/react-native-carplay/android/src/main/java/org/birkir/carplay/parser/RCTListTemplate.kt
+++ b/node_modules/react-native-carplay/android/src/main/java/org/birkir/carplay/parser/RCTListTemplate.kt
@@ -36,13 +36,15 @@ class RCTListTemplate(
       props.getArray("sections")?.let {
         for (i in 0 until it.size()) {
           val section = it.getMap(i)
+          if (section != null) {
           val header = section.getString("header")
           addSectionedList(
             SectionedItemList.create(
               parseItemList(section.getArray("items")),
-              header ?: "Missing title"
+                header ?: "Missing title"
+              )
             )
-          )
+          }
         }
       }
 
diff --git a/node_modules/react-native-carplay/android/src/main/java/org/birkir/carplay/parser/RCTTabTemplate.kt b/node_modules/react-native-carplay/android/src/main/java/org/birkir/carplay/parser/RCTTabTemplate.kt
index 11d8261..ff87911 100644
--- a/node_modules/react-native-carplay/android/src/main/java/org/birkir/carplay/parser/RCTTabTemplate.kt
+++ b/node_modules/react-native-carplay/android/src/main/java/org/birkir/carplay/parser/RCTTabTemplate.kt
@@ -21,10 +21,10 @@ class RCTTabTemplate(
       setLoading(props.isLoading())
       props.getArray("templates")?.let {
         for (i in 0 until it.size()) {
-          addTab(parseTab(it.getMap(i)))
+          addTab(parseTab(it.getMap(i)!!))
         }
         // Apply and select first tab
-        it.getMap(0).getString("id")?.let { it1 ->
+        it.getMap(0)!!.getString("id")?.let { it1 ->
           setTabContents(parseTabContents(it1))
           setActiveTabContentId(it1)
         }
diff --git a/node_modules/react-native-carplay/android/src/main/java/org/birkir/carplay/parser/RCTTemplate.kt b/node_modules/react-native-carplay/android/src/main/java/org/birkir/carplay/parser/RCTTemplate.kt
index 01dbabd..ac348ca 100644
--- a/node_modules/react-native-carplay/android/src/main/java/org/birkir/carplay/parser/RCTTemplate.kt
+++ b/node_modules/react-native-carplay/android/src/main/java/org/birkir/carplay/parser/RCTTemplate.kt
@@ -153,9 +153,9 @@ abstract class RCTTemplate(
     return ItemList.Builder().apply {
       for (i in 0 until items!!.size()) {
         if (type == "row") {
-          addItem(parseRowItem(items.getMap(i), i))
+          addItem(parseRowItem(items.getMap(i)!!, i))
         } else if (type == "grid") {
-          addItem(parseGridItem(items.getMap(i), i))
+          addItem(parseGridItem(items.getMap(i)!!, i))
         }
       }
     }.build()
@@ -187,15 +187,15 @@ abstract class RCTTemplate(
       if (titleVariants != null) {
         if (titleVariants.size() > 0) {
           setTitle(parseCarText(
-            titleVariants.getString(0),
+            titleVariants.getString(0)!!,
             metadata
           ))
         }
         if (titleVariants.size() > 1) {
-          setText(titleVariants.getString(1))
+          setText(titleVariants.getString(1)!!)
         }
       }
-      item.getMap("image")?.let { setImage(parseCarIcon(it)) }
+      item.getMap("image")?.let { setImage(parseCarIcon(it)!!) }
       setLoading(item.isLoading())
       setOnClickListener {
         eventEmitter.gridButtonPressed(id, index)
@@ -259,11 +259,11 @@ abstract class RCTTemplate(
     )
     props.getArray("texts")?.let {
       for (i in 0 until it.size()) {
-        builder.addText(it.getString(i))
+        builder.addText(it.getString(i)!!)
       }
     }
     props.getMap("image")?.let {
-      builder.setImage(parseCarIcon(it))
+      builder.setImage(parseCarIcon(it)!!)
     }
     try {
       val onPress = props.getInt("onPress")
@@ -306,7 +306,7 @@ abstract class RCTTemplate(
       }
       item.getArray("items")?.let {
         for (i in 0 until it.size()) {
-          addRow(parseRowItem(it.getMap(i), i))
+          addRow(parseRowItem(it.getMap(i)!!, i))
         }
       }
     }.build()
